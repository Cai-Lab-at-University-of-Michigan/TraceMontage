/* COPYRIGHT Creative Commons Attribution-Non Commercial 4.0 International (CC BY-NC 4.0) */

/**
 * An ImageJ Plugin for Merging Neuronal Tracing Results of Multiple Tracers from Tiled Multi-spectral 3-D Images.
 *
 * @author Aslan Satary Dizaji <asataryd@umich.edu>
 * <https://sites.google.com/a/umich.edu/aslansdizaji>
 * <https://github.com/aslansd/TraceMontage>
 * @version 1.1 Created on 2015/05 (last modified on 2018/12)
 */

import ij.IJ;
import ij.ImagePlus;
import ij.io.Opener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;

public class _TraceMontage extends javax.swing.JFrame {

    private Integer montageMethodFlag = 1;
    
    private Integer tracedataFileTypeFlag1 = 1;
    private Integer tracedataFileTypeFlag2 = 1;
    private Integer tracedataMontageFileTypeFlag = 1;
    
    private String tracedataStatus1;
    private String tracedataHeader1;
    private Double[] imageResolution1 = new Double[3];
    
    private String tracedataMontageStatus;
    private String tracedataMontageHeader;
    private Double[] imageMontageResolution = new Double[3];

    private Integer imageSizeWidth1;
    private Integer imageSizeWidth2;
    private Integer imageSizeHeight1;
    private Integer imageSizeHeight2;
        
    private List<String[]> tracedataNeuronTag1 = new ArrayList<>();
    private List<String[]> tracedataNeuronTag2 = new ArrayList<>();
    private List<String[]> tracedataNeuronBranch1 = new ArrayList<>();
    private List<String[]> tracedataNeuronBranch2 = new ArrayList<>();
    private List<Double[]> tracedataNeuronColor1 = new ArrayList<>();
    private List<Double[]> tracedataNeuronColor2 = new ArrayList<>();
    
    private List<Integer[][]> tracedataNeuronCoordinate1 = new ArrayList<>();
    private List<Integer[][]> tracedataNeuronCoordinateModified1 = new ArrayList<>();
    private List<Integer[][]> tracedataNeuronCoordinate2 = new ArrayList<>();
    private List<Integer[][]> tracedataNeuronCoordinateModified2 = new ArrayList<>();
    private List<String[]> tracedataNeuronType1 = new ArrayList<>();
    private List<String[]> tracedataNeuronTypeModified1 = new ArrayList<>();
    private List<String[]> tracedataNeuronType2 = new ArrayList<>();
    private List<Integer[]> tracedataNeuronRadius1 = new ArrayList<>();
    private List<Integer[]> tracedataNeuronRadiusModified1 = new ArrayList<>();
    private List<Integer[]> tracedataNeuronRadius2 = new ArrayList<>();
    private List<Integer[]> tracedataNeuronSynapse1 = new ArrayList<>();
    private List<Integer[]> tracedataNeuronSynapseModified1 = new ArrayList<>();
    private List<Integer[]> tracedataNeuronSynapse2 = new ArrayList<>();
    private List<String[]> tracedataNeuronConnection1 = new ArrayList<>();
    private List<String[]> tracedataNeuronConnectionModified1 = new ArrayList<>();
    private List<String[]> tracedataNeuronConnection2 = new ArrayList<>();
    
    private List<String[]> tracedataMontageNeuronTag = new ArrayList<>();
    private List<String[]> tracedataMontageNeuronBranch = new ArrayList<>();
    private List<Integer[][]> tracedataMontageNeuronCoordinate = new ArrayList<>();
    private List<String[]> tracedataMontageNeuronType = new ArrayList<>();
    private List<Integer[]> tracedataMontageNeuronRadius = new ArrayList<>();
    private List<Integer[]> tracedataMontageNeuronSynapse = new ArrayList<>();
    private List<String[]> tracedataMontageNeuronConnection = new ArrayList<>();

    private List<String[]> matchedOverlappedTraceBranch = new ArrayList<>();
    private List<String[]> matchedOverlappedTraceAnalysis = new ArrayList<>();

    /** Creates new form _TraceMontage */
    public _TraceMontage() {
        initComponents();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        montageJFileChooser = new javax.swing.JFileChooser();
        filedata1JFileChooser = new javax.swing.JFileChooser();
        fileimage1JFileChooser = new javax.swing.JFileChooser();
        filedata2JFileChooser = new javax.swing.JFileChooser();
        fileimage2JFileChooser = new javax.swing.JFileChooser();
        montageMethodButtonGroup = new javax.swing.ButtonGroup();
        image1JPanel = new javax.swing.JPanel();
        filedata1JLabel = new javax.swing.JLabel();
        fileimage1JLabel = new javax.swing.JLabel();
        filedata1JButton = new javax.swing.JButton();
        fileimage1JButton = new javax.swing.JButton();
        filedata1JTextField = new javax.swing.JTextField();
        fileimage1JTextField = new javax.swing.JTextField();
        image2JPanel = new javax.swing.JPanel();
        filedata2JLabel = new javax.swing.JLabel();
        fileimage2JLabel = new javax.swing.JLabel();
        filedata2JButton = new javax.swing.JButton();
        fileimage2JButton = new javax.swing.JButton();
        filedata2JTextField = new javax.swing.JTextField();
        fileimage2JTextField = new javax.swing.JTextField();
        spatialJPanel = new javax.swing.JPanel();
        regionsizeJLabel = new javax.swing.JLabel();
        regionsizeJTextField = new javax.swing.JTextField();
        relativePositionJLabel = new javax.swing.JLabel();
        relativePositionJComboBox = new javax.swing.JComboBox();
        criteriaJPanel = new javax.swing.JPanel();
        colorToleranceJLabel = new javax.swing.JLabel();
        positionTolerancePixelJLabel = new javax.swing.JLabel();
        positionTolerancePointJLabel = new javax.swing.JLabel();
        positionToleranceRatioJLabel = new javax.swing.JLabel();
        colorToleranceJTextField = new javax.swing.JTextField();
        positionTolerancePixelJTextField = new javax.swing.JTextField();
        positionTolerancePointJTextField = new javax.swing.JTextField();
        positionToleranceRatioJTextField = new javax.swing.JTextField();
        montageMethod1JRadioButton = new javax.swing.JRadioButton();
        montageMethod2JRadioButton = new javax.swing.JRadioButton();
        montageMethod3JRadioButton = new javax.swing.JRadioButton();
        criteriaJPanel1 = new javax.swing.JPanel();
        montageJButton = new javax.swing.JButton();
        cancelJButton = new javax.swing.JButton();

        montageJFileChooser.setAcceptAllFileFilterUsed(false);
        montageJFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        montageJFileChooser.setCurrentDirectory(new java.io.File("/home/loganaw/C:/Users/asataryd/Desktop"));
        montageJFileChooser.setDialogTitle("Choose a zip/swc file ...");
        montageJFileChooser.setFileFilter(new CustomZipSWCFileFilter());
        montageJFileChooser.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        montageJFileChooser.getAccessibleContext().setAccessibleParent(this);

        filedata1JFileChooser.setAcceptAllFileFilterUsed(false);
        filedata1JFileChooser.setCurrentDirectory(new java.io.File("/home/loganaw/C:/Users/asataryd/Desktop"));
        filedata1JFileChooser.setDialogTitle("Choose a zip/swc file ...");
        filedata1JFileChooser.setFileFilter(new CustomZipSWCFileFilter());
        filedata1JFileChooser.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata1JFileChooser.getAccessibleContext().setAccessibleParent(image1JPanel);

        fileimage1JFileChooser.setAcceptAllFileFilterUsed(false);
        fileimage1JFileChooser.setCurrentDirectory(new java.io.File("/home/loganaw/C:/Users/asataryd/Desktop"));
        fileimage1JFileChooser.setDialogTitle("Choose a tif file ...");
        fileimage1JFileChooser.setFileFilter(new CustomTifFileFilter());
        fileimage1JFileChooser.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage1JFileChooser.getAccessibleContext().setAccessibleParent(image1JPanel);

        filedata2JFileChooser.setAcceptAllFileFilterUsed(false);
        filedata2JFileChooser.setCurrentDirectory(new java.io.File("/home/loganaw/C:/Users/asataryd/Desktop"));
        filedata2JFileChooser.setDialogTitle("Choose a zip/swc file ...");
        filedata2JFileChooser.setFileFilter(new CustomZipSWCFileFilter());
        filedata2JFileChooser.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata2JFileChooser.getAccessibleContext().setAccessibleParent(image2JPanel);

        fileimage2JFileChooser.setAcceptAllFileFilterUsed(false);
        fileimage2JFileChooser.setCurrentDirectory(new java.io.File("/home/loganaw/C:/Users/asataryd/Desktop"));
        fileimage2JFileChooser.setDialogTitle("Choose a tif file ...");
        fileimage2JFileChooser.setFileFilter(new CustomTifFileFilter());
        fileimage2JFileChooser.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage2JFileChooser.getAccessibleContext().setAccessibleParent(image2JPanel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Trace Montage");
        setBounds(new java.awt.Rectangle(0, 0, 620, 670));
        setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 620, 670));
        setMinimumSize(new java.awt.Dimension(620, 670));
        setName(""); // NOI18N
        setResizable(false);

        image1JPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Image 1 (Target)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        image1JPanel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        image1JPanel.setMaximumSize(new java.awt.Dimension(295, 100));
        image1JPanel.setMinimumSize(new java.awt.Dimension(295, 100));
        image1JPanel.setPreferredSize(new java.awt.Dimension(295, 100));

        filedata1JLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata1JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        filedata1JLabel.setText("Tracing Data-set :");
        filedata1JLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filedata1JLabel.setMaximumSize(new java.awt.Dimension(62, 14));
        filedata1JLabel.setMinimumSize(new java.awt.Dimension(62, 14));
        filedata1JLabel.setPreferredSize(new java.awt.Dimension(62, 14));

        fileimage1JLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage1JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fileimage1JLabel.setText("Image Stack :");
        fileimage1JLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileimage1JLabel.setMaximumSize(new java.awt.Dimension(62, 14));
        fileimage1JLabel.setMinimumSize(new java.awt.Dimension(62, 14));
        fileimage1JLabel.setPreferredSize(new java.awt.Dimension(62, 14));

        filedata1JButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata1JButton.setText("Browse...");
        filedata1JButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filedata1JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filedata1JButtonActionPerformed(evt);
            }
        });

        fileimage1JButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage1JButton.setText("Browse...");
        fileimage1JButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileimage1JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileimage1JButtonActionPerformed(evt);
            }
        });

        filedata1JTextField.setEditable(false);
        filedata1JTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata1JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        filedata1JTextField.setText("*.zip/swc");
        filedata1JTextField.setMaximumSize(new java.awt.Dimension(100, 20));
        filedata1JTextField.setMinimumSize(new java.awt.Dimension(100, 20));
        filedata1JTextField.setPreferredSize(new java.awt.Dimension(100, 20));

        fileimage1JTextField.setEditable(false);
        fileimage1JTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage1JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fileimage1JTextField.setText("*.tif");
        fileimage1JTextField.setMaximumSize(new java.awt.Dimension(100, 20));
        fileimage1JTextField.setMinimumSize(new java.awt.Dimension(100, 20));
        fileimage1JTextField.setPreferredSize(new java.awt.Dimension(100, 20));

        javax.swing.GroupLayout image1JPanelLayout = new javax.swing.GroupLayout(image1JPanel);
        image1JPanel.setLayout(image1JPanelLayout);
        image1JPanelLayout.setHorizontalGroup(
            image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(image1JPanelLayout.createSequentialGroup()
                .addGroup(image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(image1JPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileimage1JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                    .addComponent(filedata1JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filedata1JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(fileimage1JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filedata1JButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fileimage1JButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        image1JPanelLayout.setVerticalGroup(
            image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(image1JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(filedata1JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filedata1JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filedata1JButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(image1JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fileimage1JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileimage1JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileimage1JButton))
                .addContainerGap())
        );

        image2JPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Image 2 (Source)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        image2JPanel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        image2JPanel.setMaximumSize(new java.awt.Dimension(295, 100));
        image2JPanel.setMinimumSize(new java.awt.Dimension(295, 100));
        image2JPanel.setPreferredSize(new java.awt.Dimension(295, 100));

        filedata2JLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata2JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        filedata2JLabel.setText("Tracing Data-set :");
        filedata2JLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filedata2JLabel.setMaximumSize(new java.awt.Dimension(62, 14));
        filedata2JLabel.setMinimumSize(new java.awt.Dimension(62, 14));
        filedata2JLabel.setPreferredSize(new java.awt.Dimension(62, 14));

        fileimage2JLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage2JLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fileimage2JLabel.setText("Image Stack :");
        fileimage2JLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileimage2JLabel.setMaximumSize(new java.awt.Dimension(62, 14));
        fileimage2JLabel.setMinimumSize(new java.awt.Dimension(62, 14));
        fileimage2JLabel.setPreferredSize(new java.awt.Dimension(62, 14));

        filedata2JButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata2JButton.setText("Browse...");
        filedata2JButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filedata2JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filedata2JButtonActionPerformed(evt);
            }
        });

        fileimage2JButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage2JButton.setText("Browse...");
        fileimage2JButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileimage2JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileimage2JButtonActionPerformed(evt);
            }
        });

        filedata2JTextField.setEditable(false);
        filedata2JTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        filedata2JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        filedata2JTextField.setText("*.zip/swc");
        filedata2JTextField.setMaximumSize(new java.awt.Dimension(100, 20));
        filedata2JTextField.setMinimumSize(new java.awt.Dimension(100, 20));
        filedata2JTextField.setPreferredSize(new java.awt.Dimension(100, 20));

        fileimage2JTextField.setEditable(false);
        fileimage2JTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        fileimage2JTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fileimage2JTextField.setText("*.tif");
        fileimage2JTextField.setMaximumSize(new java.awt.Dimension(100, 20));
        fileimage2JTextField.setMinimumSize(new java.awt.Dimension(100, 20));
        fileimage2JTextField.setPreferredSize(new java.awt.Dimension(100, 20));

        javax.swing.GroupLayout image2JPanelLayout = new javax.swing.GroupLayout(image2JPanel);
        image2JPanel.setLayout(image2JPanelLayout);
        image2JPanelLayout.setHorizontalGroup(
            image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(image2JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filedata2JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addComponent(fileimage2JLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filedata2JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(fileimage2JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filedata2JButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fileimage2JButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        image2JPanelLayout.setVerticalGroup(
            image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(image2JPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(filedata2JButton)
                    .addComponent(filedata2JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filedata2JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(image2JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fileimage2JButton)
                    .addComponent(fileimage2JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileimage2JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        spatialJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Spatial Values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        spatialJPanel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        spatialJPanel.setMaximumSize(new java.awt.Dimension(600, 100));
        spatialJPanel.setMinimumSize(new java.awt.Dimension(600, 100));
        spatialJPanel.setPreferredSize(new java.awt.Dimension(600, 100));

        regionsizeJLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        regionsizeJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        regionsizeJLabel.setText("Overlapped Region Size (pixel) :");
        regionsizeJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        regionsizeJTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        regionsizeJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        regionsizeJTextField.setText("100");
        regionsizeJTextField.setMaximumSize(new java.awt.Dimension(30, 20));
        regionsizeJTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        regionsizeJTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        regionsizeJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                regionsizeJTextFieldFocusLost(evt);
            }
        });

        relativePositionJLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        relativePositionJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        relativePositionJLabel.setText("Relative Position of Image 2 to Image 1 :");
        relativePositionJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        relativePositionJComboBox.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        relativePositionJComboBox.setMaximumRowCount(2);
        relativePositionJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Right", "Bottom" }));
        relativePositionJComboBox.setMaximumSize(new java.awt.Dimension(70, 20));
        relativePositionJComboBox.setMinimumSize(new java.awt.Dimension(70, 20));
        relativePositionJComboBox.setPreferredSize(new java.awt.Dimension(70, 20));

        javax.swing.GroupLayout spatialJPanelLayout = new javax.swing.GroupLayout(spatialJPanel);
        spatialJPanel.setLayout(spatialJPanelLayout);
        spatialJPanelLayout.setHorizontalGroup(
            spatialJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spatialJPanelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(spatialJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(regionsizeJLabel)
                    .addComponent(relativePositionJLabel))
                .addGap(22, 22, 22)
                .addGroup(spatialJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(relativePositionJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regionsizeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        spatialJPanelLayout.setVerticalGroup(
            spatialJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spatialJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spatialJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regionsizeJLabel)
                    .addComponent(regionsizeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(spatialJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(relativePositionJLabel)
                    .addComponent(relativePositionJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        criteriaJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Merging Criteria", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        criteriaJPanel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        criteriaJPanel.setMaximumSize(new java.awt.Dimension(600, 250));
        criteriaJPanel.setMinimumSize(new java.awt.Dimension(600, 250));
        criteriaJPanel.setPreferredSize(new java.awt.Dimension(600, 250));

        colorToleranceJLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        colorToleranceJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colorToleranceJLabel.setText("Maximum tolerance for relative difference of intensities between each corresponding pair of channels (0-1) :");
        colorToleranceJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        positionTolerancePixelJLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        positionTolerancePixelJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        positionTolerancePixelJLabel.setText("Maximum distance between each pair of the nearest points (pixel) :");
        positionTolerancePixelJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        positionTolerancePointJLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        positionTolerancePointJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        positionTolerancePointJLabel.setText("Minimum number of the pairs of the nearest points based on the above criterion :");
        positionTolerancePointJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        positionToleranceRatioJLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        positionToleranceRatioJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        positionToleranceRatioJLabel.setText("Minimum ratio of the overlapped length to the whole length of both overlapped branches (0-1) :");
        positionToleranceRatioJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        colorToleranceJTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        colorToleranceJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        colorToleranceJTextField.setText("0.3");
        colorToleranceJTextField.setMaximumSize(new java.awt.Dimension(30, 20));
        colorToleranceJTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        colorToleranceJTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        colorToleranceJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                colorToleranceJTextFieldFocusLost(evt);
            }
        });

        positionTolerancePixelJTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        positionTolerancePixelJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        positionTolerancePixelJTextField.setText("5");
        positionTolerancePixelJTextField.setMaximumSize(new java.awt.Dimension(30, 20));
        positionTolerancePixelJTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        positionTolerancePixelJTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        positionTolerancePixelJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                positionTolerancePixelJTextFieldFocusLost(evt);
            }
        });

        positionTolerancePointJTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        positionTolerancePointJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        positionTolerancePointJTextField.setText("50");
        positionTolerancePointJTextField.setMaximumSize(new java.awt.Dimension(30, 20));
        positionTolerancePointJTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        positionTolerancePointJTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        positionTolerancePointJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                positionTolerancePointJTextFieldFocusLost(evt);
            }
        });

        positionToleranceRatioJTextField.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        positionToleranceRatioJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        positionToleranceRatioJTextField.setText("0.8");
        positionToleranceRatioJTextField.setMaximumSize(new java.awt.Dimension(30, 20));
        positionToleranceRatioJTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        positionToleranceRatioJTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        positionToleranceRatioJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                positionToleranceRatioJTextFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout criteriaJPanelLayout = new javax.swing.GroupLayout(criteriaJPanel);
        criteriaJPanel.setLayout(criteriaJPanelLayout);
        criteriaJPanelLayout.setHorizontalGroup(
            criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(criteriaJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorToleranceJLabel)
                    .addComponent(positionTolerancePixelJLabel)
                    .addComponent(positionTolerancePointJLabel)
                    .addComponent(positionToleranceRatioJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorToleranceJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(positionTolerancePixelJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(positionTolerancePointJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(positionToleranceRatioJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        criteriaJPanelLayout.setVerticalGroup(
            criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(criteriaJPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorToleranceJLabel)
                    .addComponent(colorToleranceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionTolerancePixelJLabel)
                    .addComponent(positionTolerancePixelJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionTolerancePointJLabel)
                    .addComponent(positionTolerancePointJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(criteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionToleranceRatioJLabel)
                    .addComponent(positionToleranceRatioJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        montageMethodButtonGroup.add(montageMethod1JRadioButton);
        montageMethod1JRadioButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        montageMethod1JRadioButton.setSelected(true);
        montageMethod1JRadioButton.setActionCommand("Use Montage as a mean of merging the two sets of traces of two adjacent images.");
        montageMethod1JRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        montageMethod1JRadioButton.setLabel("Use Montage as a mean of merging the two sets of traces of two adjacent images.");
        montageMethod1JRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montageMethod1JRadioButtonActionPerformed(evt);
            }
        });

        montageMethodButtonGroup.add(montageMethod2JRadioButton);
        montageMethod2JRadioButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        montageMethod2JRadioButton.setText("Use Montage as a mean of merging the two sets of traces of one image.");
        montageMethod2JRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        montageMethod2JRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montageMethod2JRadioButtonActionPerformed(evt);
            }
        });

        montageMethodButtonGroup.add(montageMethod3JRadioButton);
        montageMethod3JRadioButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        montageMethod3JRadioButton.setText("Use Montage as a mean of removing the redundant traces of one image.");
        montageMethod3JRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        montageMethod3JRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montageMethod3JRadioButtonActionPerformed(evt);
            }
        });

        criteriaJPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Start Program", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11)));
        criteriaJPanel1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        criteriaJPanel1.setMaximumSize(new java.awt.Dimension(600, 250));
        criteriaJPanel1.setMinimumSize(new java.awt.Dimension(600, 250));

        montageJButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        montageJButton.setText("Montage");
        montageJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        montageJButton.setMaximumSize(new java.awt.Dimension(75, 23));
        montageJButton.setMinimumSize(new java.awt.Dimension(75, 23));
        montageJButton.setPreferredSize(new java.awt.Dimension(75, 23));
        montageJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montageJButtonActionPerformed(evt);
            }
        });

        cancelJButton.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cancelJButton.setText("Cancel");
        cancelJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cancelJButton.setMaximumSize(new java.awt.Dimension(75, 23));
        cancelJButton.setMinimumSize(new java.awt.Dimension(75, 23));
        cancelJButton.setPreferredSize(new java.awt.Dimension(75, 23));
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout criteriaJPanel1Layout = new javax.swing.GroupLayout(criteriaJPanel1);
        criteriaJPanel1.setLayout(criteriaJPanel1Layout);
        criteriaJPanel1Layout.setHorizontalGroup(
            criteriaJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(criteriaJPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(criteriaJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(montageJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        criteriaJPanel1Layout.setVerticalGroup(
            criteriaJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(criteriaJPanel1Layout.createSequentialGroup()
                .addComponent(montageJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(montageMethod3JRadioButton)
                            .addComponent(montageMethod1JRadioButton)
                            .addComponent(montageMethod2JRadioButton))
                        .addGap(18, 18, 18)
                        .addComponent(criteriaJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(spatialJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(image1JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(image2JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(criteriaJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(image2JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(image1JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spatialJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(criteriaJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(montageMethod1JRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(montageMethod2JRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(montageMethod3JRadioButton))
                    .addComponent(criteriaJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        image1JPanel.getAccessibleContext().setAccessibleName("Image 1 (Source)");
        criteriaJPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filedata1JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filedata1JButtonActionPerformed
        // TODO add your handling code here:
        int returnValue = filedata1JFileChooser.showOpenDialog(image1JPanel);
        
        if (returnValue == filedata1JFileChooser.APPROVE_OPTION) {
            
            if (filedata1JFileChooser.getSelectedFile().getAbsolutePath().endsWith(".zip")) {

                try {
                    File filedata1 = filedata1JFileChooser.getSelectedFile();
                    tracedataFileTypeFlag1 = 1;
                    
                    ReadTraceDataFile tracedataInstance1 = new ReadTraceDataFile(filedata1, tracedataFileTypeFlag1);

                    tracedataStatus1 = tracedataInstance1.getTracedataStatus();
                    tracedataHeader1 = tracedataInstance1.getTracedataHeader();

                    tracedataNeuronTag1 = tracedataInstance1.getTracedataNeuronTag();
                    tracedataNeuronBranch1 = tracedataInstance1.getTracedataNeuronBranch();
                    tracedataNeuronCoordinate1 = tracedataInstance1.getTracedataNeuronCoordinate();
                    tracedataNeuronType1 = tracedataInstance1.getTracedataNeuronType();
                    tracedataNeuronRadius1 = tracedataInstance1.getTracedataNeuronRadius();
                    tracedataNeuronSynapse1 = tracedataInstance1.getTracedataNeuronSynapse();
                    tracedataNeuronConnection1 = tracedataInstance1.getTracedataNeuronConnection();

                    if (tracedataInstance1.getTracedataFlag() == true) {
                        filedata1JTextField.setText(filedata1JFileChooser.getSelectedFile().getName());
                    } else {
                        IJ.error("Input file error", "Please choose the correct zip-format data-file of image 1!");
                        return;
                    }
                } catch (IOException ex) {
                    IJ.error("Input file error", "Please choose a zip-format file!");
                    System.out.println(ex.getMessage());
                    return;
                }

            } else if (filedata1JFileChooser.getSelectedFile().getAbsolutePath().endsWith(".swc")) {

                try {
                    File filedata1 = filedata1JFileChooser.getSelectedFile();
                    tracedataFileTypeFlag1 = 2;

                    ReadTraceDataFile tracedataInstance1 = new ReadTraceDataFile(filedata1, tracedataFileTypeFlag1);

                    tracedataStatus1 = tracedataInstance1.getTracedataStatus();
                    tracedataHeader1 = tracedataInstance1.getTracedataHeader();
                    imageResolution1 = tracedataInstance1.getImageResolution();

                    tracedataNeuronTag1 = tracedataInstance1.getTracedataNeuronTag();
                    tracedataNeuronBranch1 = tracedataInstance1.getTracedataNeuronBranch();
                    tracedataNeuronCoordinate1 = tracedataInstance1.getTracedataNeuronCoordinate();
                    tracedataNeuronType1 = tracedataInstance1.getTracedataNeuronType();
                    tracedataNeuronRadius1 = tracedataInstance1.getTracedataNeuronRadius();
                    tracedataNeuronSynapse1 = tracedataInstance1.getTracedataNeuronSynapse();
                    tracedataNeuronConnection1 = tracedataInstance1.getTracedataNeuronConnection();

                    if (tracedataInstance1.getTracedataFlag() == true) {
                        filedata1JTextField.setText(filedata1JFileChooser.getSelectedFile().getName());
                    } else {
                        IJ.error("Input file error", "Please choose the correct swc-format data-file of image 1!");
                        return;
                    }
                } catch (IOException ex) {
                    IJ.error("Input file error", "Please choose a swc-format file!");
                    System.out.println(ex.getMessage());
                    return;
                }
            }
        }
    }//GEN-LAST:event_filedata1JButtonActionPerformed

    private void fileimage1JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileimage1JButtonActionPerformed
        // TODO add your handling code here:
        if (filedata1JTextField.getText().equals("*.zip/swc")) {
            IJ.error("Input file error", "Please first choose the zip/swc-format data-file of image 1!");
            return;
        } else {
            int returnValue = fileimage1JFileChooser.showOpenDialog(image1JPanel);

            if (returnValue == fileimage1JFileChooser.APPROVE_OPTION) {
                
                Opener fileimage1 = new Opener();
                ImagePlus image1 = fileimage1.openImage(fileimage1JFileChooser.getSelectedFile().getAbsolutePath());

                if (image1 != null) {

                    ReadTraceImageFile traceimageInstance1 = new ReadTraceImageFile(image1, tracedataNeuronBranch1, tracedataNeuronCoordinate1);

                    tracedataNeuronColor1 = traceimageInstance1.getTracedataNeuronColor();
                    imageSizeWidth1 = traceimageInstance1.getImageSizeWidth();
                    imageSizeHeight1 = traceimageInstance1.getImageSizeHeight();

                    if (traceimageInstance1.getTraceimageFlag() == true) {
                        fileimage1JTextField.setText(fileimage1JFileChooser.getSelectedFile().getName());
                    } else {
                        IJ.error("Input file error", "Please choose the correct tif-format image-file of image 1!");
                        return;
                    }
                } else {
                    IJ.error("Input file error", "Please choose a tif-format image-file!");
                    return;
                }
            }
        }
    }//GEN-LAST:event_fileimage1JButtonActionPerformed

    private void filedata2JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filedata2JButtonActionPerformed
        // TODO add your handling code here:
        int returnValue = filedata2JFileChooser.showOpenDialog(image2JPanel);

        if (returnValue == filedata2JFileChooser.APPROVE_OPTION) {

            if (filedata2JFileChooser.getSelectedFile().getAbsolutePath().endsWith(".zip")) {

                try {
                    File filedata2 = filedata2JFileChooser.getSelectedFile();
                    tracedataFileTypeFlag2 = 1;

                    ReadTraceDataFile tracedataInstance2 = new ReadTraceDataFile(filedata2, tracedataFileTypeFlag2);

                    tracedataNeuronTag2 = tracedataInstance2.getTracedataNeuronTag();
                    tracedataNeuronBranch2 = tracedataInstance2.getTracedataNeuronBranch();
                    tracedataNeuronCoordinate2 = tracedataInstance2.getTracedataNeuronCoordinate();
                    tracedataNeuronType2 = tracedataInstance2.getTracedataNeuronType();
                    tracedataNeuronRadius2 = tracedataInstance2.getTracedataNeuronRadius();
                    tracedataNeuronSynapse2 = tracedataInstance2.getTracedataNeuronSynapse();
                    tracedataNeuronConnection2 = tracedataInstance2.getTracedataNeuronConnection();

                    if (tracedataInstance2.getTracedataFlag() == true) {
                        filedata2JTextField.setText(filedata2JFileChooser.getSelectedFile().getName());
                    } else {
                        IJ.error("Input file error", "Please choose the correct zip-format data-file of image 2!");
                        return;
                    }
                } catch (IOException ex) {
                    IJ.error("Input file error", "Please choose a zip-format file!");
                    System.out.println(ex.getMessage());
                    return;
                }

            } else if (filedata2JFileChooser.getSelectedFile().getAbsolutePath().endsWith(".swc")) {

                try {
                    File filedata2 = filedata2JFileChooser.getSelectedFile();
                    tracedataFileTypeFlag2 = 2;

                    ReadTraceDataFile tracedataInstance2 = new ReadTraceDataFile(filedata2, tracedataFileTypeFlag2);

                    tracedataNeuronTag2 = tracedataInstance2.getTracedataNeuronTag();
                    tracedataNeuronBranch2 = tracedataInstance2.getTracedataNeuronBranch();
                    tracedataNeuronCoordinate2 = tracedataInstance2.getTracedataNeuronCoordinate();
                    tracedataNeuronType2 = tracedataInstance2.getTracedataNeuronType();
                    tracedataNeuronRadius2 = tracedataInstance2.getTracedataNeuronRadius();
                    tracedataNeuronSynapse2 = tracedataInstance2.getTracedataNeuronSynapse();
                    tracedataNeuronConnection2 = tracedataInstance2.getTracedataNeuronConnection();

                    if (tracedataInstance2.getTracedataFlag() == true) {
                        filedata2JTextField.setText(filedata2JFileChooser.getSelectedFile().getName());
                    } else {
                        IJ.error("Input file error", "Please choose the correct swc-format data-file of image 2!");
                        return;
                    }
                } catch (IOException ex) {
                    IJ.error("Input file error", "Please choose a swc-format file!");
                    System.out.println(ex.getMessage());
                    return;
                }
            }
        }
    }//GEN-LAST:event_filedata2JButtonActionPerformed

    private void fileimage2JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileimage2JButtonActionPerformed
        // TODO add your handling code here:
        if (filedata2JTextField.getText().equals("*.zip/swc")) {
            IJ.error("Input file error", "Please first choose the zip/swc-format data-file of image 2!");
            return;
        } else {
            int returnValue = fileimage2JFileChooser.showOpenDialog(image2JPanel);

            if (returnValue == fileimage2JFileChooser.APPROVE_OPTION) {

                Opener fileimage2 = new Opener();
                ImagePlus image2 = fileimage2.openImage(fileimage2JFileChooser.getSelectedFile().getAbsolutePath());

                if (image2 != null) {

                    ReadTraceImageFile traceimageInstance2 = new ReadTraceImageFile(image2, tracedataNeuronBranch2, tracedataNeuronCoordinate2);

                    tracedataNeuronColor2 = traceimageInstance2.getTracedataNeuronColor();
                    imageSizeWidth2 = traceimageInstance2.getImageSizeWidth();
                    imageSizeHeight2 = traceimageInstance2.getImageSizeHeight();

                    if (traceimageInstance2.getTraceimageFlag() == true) {
                        fileimage2JTextField.setText(fileimage2JFileChooser.getSelectedFile().getName());
                    } else {
                        IJ.error("Input file error", "Please choose the correct tif-format image-file of image 2!");
                        return;
                    }
                } else {
                    IJ.error("Input file error", "Please choose a tif-format image-file!");
                    return;
                }
            }
        }
    }//GEN-LAST:event_fileimage2JButtonActionPerformed

    private void montageJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montageJButtonActionPerformed
        if (montageMethodFlag == 1) {

            String regionsizeString = regionsizeJTextField.getText();
            String relativePositionString = (String)relativePositionJComboBox.getSelectedItem();
            String colorToleranceString = colorToleranceJTextField.getText();
            String positionTolerancePixelString = positionTolerancePixelJTextField.getText();
            String positionTolerancePointString = positionTolerancePointJTextField.getText();
            String positionToleranceRatioString = positionToleranceRatioJTextField.getText();

            Integer regionsizeValue = Integer.parseInt(regionsizeString);
            Double colorToleranceValue = Double.parseDouble(colorToleranceString);
            Integer positionTolerancePixelValue = Integer.parseInt(positionTolerancePixelString);
            Integer positionTolerancePointValue = Integer.parseInt(positionTolerancePointString);
            Double positionToleranceRatioValue = Double.parseDouble(positionToleranceRatioString);

            if (filedata1JTextField.getText().equals("*.zip/swc")) {
                IJ.error("Input file error", "Please choose the zip/swc-format data-file of image 1!");
                return;
            }

            if (fileimage1JTextField.getText().equals("*.tif")) {
                IJ.error("Input file error", "Please choose the tif-format image-file of image 1!");
                return;
            }

            if (filedata2JTextField.getText().equals("*.zip/swc")) {
                IJ.error("Input file error", "Please choose the zip/swc-format data-file of image 2!");
                return;
            }

            if (fileimage2JTextField.getText().equals("*.tif")) {
                IJ.error("Input file error", "Please choose the tif-format image-file of image 2!");
                return;
            }

            if (relativePositionString.equals("Right") && (imageSizeHeight1.intValue() != imageSizeHeight2.intValue())) {
                IJ.error("Input value error", "The heights of two images must be equal!");
                return;
            }

            if (relativePositionString.equals("Right") && ((imageSizeWidth1.intValue() < regionsizeValue.intValue()) || (imageSizeWidth2.intValue() < regionsizeValue.intValue()))) {
                IJ.error("Input value error", "The overlapped region size must be less than the widths of both images!");
                return;
            }

            if (relativePositionString.equals("Bottom") && (imageSizeWidth1.intValue() != imageSizeWidth2.intValue())) {
                IJ.error("Input value error", "The widths of two images must be equal!");
                return;
            }

            if (relativePositionString.equals("Bottom") && ((imageSizeHeight1.intValue() < regionsizeValue.intValue()) || (imageSizeHeight2.intValue() < regionsizeValue.intValue()))) {
                IJ.error("Input value error", "The overlapped region size must be less than the heights of both images!");
                return;
            }

            int returnValue = montageJFileChooser.showSaveDialog(this);

            if (returnValue == montageJFileChooser.APPROVE_OPTION) {

                FindOverlappedTraceFirstMethod allOverlappedTraceMontageInstance = new FindOverlappedTraceFirstMethod(tracedataNeuronBranch1, tracedataNeuronColor1, tracedataNeuronCoordinate1, tracedataNeuronType1, tracedataNeuronRadius1, tracedataNeuronSynapse1, tracedataNeuronConnection1, tracedataNeuronBranch2, tracedataNeuronColor2, tracedataNeuronCoordinate2, tracedataNeuronType2, tracedataNeuronRadius2, tracedataNeuronSynapse2, tracedataNeuronConnection2, imageSizeWidth1, imageSizeHeight1, regionsizeValue, relativePositionString, colorToleranceValue, positionTolerancePixelValue, positionTolerancePointValue, positionToleranceRatioValue);

                matchedOverlappedTraceBranch = allOverlappedTraceMontageInstance.getMatchedOverlappedTraceBranch();
                matchedOverlappedTraceAnalysis = allOverlappedTraceMontageInstance.getMatchedOverlappedTraceAnalysis();

                tracedataNeuronCoordinateModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronCoordinateModified1();
                tracedataNeuronCoordinateModified2 = allOverlappedTraceMontageInstance.getTracedataNeuronCoordinateModified2();
                tracedataNeuronTypeModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronTypeModified1();
                tracedataNeuronRadiusModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronRadiusModified1();
                tracedataNeuronSynapseModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronSynapseModified1();
                tracedataNeuronConnectionModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronConnectionModified1();

                MergeAllTraceAllMethods allMergedTraceMontageInstance = new MergeAllTraceAllMethods(montageMethodFlag, matchedOverlappedTraceBranch, matchedOverlappedTraceAnalysis, tracedataNeuronTag1, tracedataNeuronBranch1, tracedataNeuronCoordinateModified1, tracedataNeuronTypeModified1, tracedataNeuronRadiusModified1, tracedataNeuronSynapseModified1, tracedataNeuronConnectionModified1, tracedataNeuronTag2, tracedataNeuronBranch2, tracedataNeuronCoordinateModified2, tracedataNeuronType2, tracedataNeuronRadius2, tracedataNeuronSynapse2, tracedataNeuronConnection2);

                tracedataMontageFileTypeFlag = tracedataFileTypeFlag1;
                tracedataMontageStatus = tracedataStatus1;
                tracedataMontageHeader = tracedataHeader1;
                imageMontageResolution = imageResolution1;

                tracedataMontageNeuronTag = allMergedTraceMontageInstance.getTracedataMontageNeuronTag();
                tracedataMontageNeuronBranch = allMergedTraceMontageInstance.getTracedataMontageNeuronBranch();
                tracedataMontageNeuronCoordinate = allMergedTraceMontageInstance.getTracedataMontageNeuronCoordinate();
                tracedataMontageNeuronType = allMergedTraceMontageInstance.getTracedataMontageNeuronType();
                tracedataMontageNeuronRadius = allMergedTraceMontageInstance.getTracedataMontageNeuronRadius();
                tracedataMontageNeuronSynapse = allMergedTraceMontageInstance.getTracedataMontageNeuronSynapse();
                tracedataMontageNeuronConnection = allMergedTraceMontageInstance.getTracedataMontageNeuronConnection();

                java.io.File filedataMontage = montageJFileChooser.getSelectedFile();

                try {
                    WriteTraceDataFile tracedataMontageInstance = new WriteTraceDataFile(filedataMontage, tracedataMontageFileTypeFlag, tracedataMontageStatus, tracedataMontageHeader, imageMontageResolution, tracedataMontageNeuronTag, tracedataMontageNeuronBranch, tracedataMontageNeuronCoordinate, tracedataMontageNeuronType, tracedataMontageNeuronRadius, tracedataMontageNeuronSynapse, tracedataMontageNeuronConnection);
                } catch (IOException ex) {
                    IJ.error("Output file error", "Please choose a correct output file!");
                    System.out.println(ex.getMessage());
                    return;
                }

                matchedOverlappedTraceAnalysis.clear();
                matchedOverlappedTraceAnalysis.addAll(allMergedTraceMontageInstance.getMatchedOverlappedTraceAnalysisModified());
                
                if (matchedOverlappedTraceAnalysis.size() > 0) {
                    NeuronMontageSummary neuronMontageSummaryInstance = new NeuronMontageSummary(filedataMontage, matchedOverlappedTraceAnalysis, tracedataNeuronBranch1, tracedataNeuronBranch2);
                }
            }
            
        } else {

            String colorToleranceString = colorToleranceJTextField.getText();
            String positionTolerancePixelString = positionTolerancePixelJTextField.getText();
            String positionTolerancePointString = positionTolerancePointJTextField.getText();
            String positionToleranceRatioString = positionToleranceRatioJTextField.getText();

            Double colorToleranceValue = Double.parseDouble(colorToleranceString);
            Integer positionTolerancePixelValue = Integer.parseInt(positionTolerancePixelString);
            Integer positionTolerancePointValue = Integer.parseInt(positionTolerancePointString);
            Double positionToleranceRatioValue = Double.parseDouble(positionToleranceRatioString);

            if (filedata1JTextField.getText().equals("*.zip/swc")) {
                IJ.error("Input file error", "Please choose the zip/swc-format data-file of image 1!");
                return;
            }

            if (fileimage1JTextField.getText().equals("*.tif")) {
                IJ.error("Input file error", "Please choose the tif-format image-file of image 1!");
                return;
            }

            if (montageMethodFlag == 2) {

                if (filedata2JTextField.getText().equals("*.zip/swc")) {
                    IJ.error("Input file error", "Please choose the zip/swc-format data-file of image 2!");
                    return;
                }

                if (fileimage2JTextField.getText().equals("*.tif")) {
                    IJ.error("Input file error", "Please choose the tif-format image-file of image 2!");
                    return;
                }
    
            } else if (montageMethodFlag == 3) {

                tracedataNeuronTag2.addAll(tracedataNeuronTag1);
                tracedataNeuronBranch2.addAll(tracedataNeuronBranch1);
                tracedataNeuronColor2.addAll(tracedataNeuronColor1);
                tracedataNeuronCoordinate2.addAll(tracedataNeuronCoordinate1);
                tracedataNeuronType2.addAll(tracedataNeuronType1);
                tracedataNeuronRadius2.addAll(tracedataNeuronRadius1);
                tracedataNeuronSynapse2.addAll(tracedataNeuronSynapse1);
                tracedataNeuronConnection2.addAll(tracedataNeuronConnection1);
            }

            int returnValue = montageJFileChooser.showSaveDialog(this);

            if (returnValue == montageJFileChooser.APPROVE_OPTION) {

                FindOverlappedTraceOtherMethods allOverlappedTraceMontageInstance = new FindOverlappedTraceOtherMethods(montageMethodFlag, tracedataNeuronBranch1, tracedataNeuronColor1, tracedataNeuronCoordinate1, tracedataNeuronType1, tracedataNeuronRadius1, tracedataNeuronSynapse1, tracedataNeuronConnection1, tracedataNeuronBranch2, tracedataNeuronColor2, tracedataNeuronCoordinate2, tracedataNeuronType2, tracedataNeuronRadius2, tracedataNeuronSynapse2, tracedataNeuronConnection2, colorToleranceValue, positionTolerancePixelValue, positionTolerancePointValue, positionToleranceRatioValue);

                matchedOverlappedTraceBranch = allOverlappedTraceMontageInstance.getMatchedOverlappedTraceBranch();
                matchedOverlappedTraceAnalysis = allOverlappedTraceMontageInstance.getMatchedOverlappedTraceAnalysis();

                tracedataNeuronCoordinateModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronCoordinateModified1();
                tracedataNeuronTypeModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronTypeModified1();
                tracedataNeuronRadiusModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronRadiusModified1();
                tracedataNeuronSynapseModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronSynapseModified1();
                tracedataNeuronConnectionModified1 = allOverlappedTraceMontageInstance.getTracedataNeuronConnectionModified1();

                MergeAllTraceAllMethods allMergedTraceMontageInstance = new MergeAllTraceAllMethods(montageMethodFlag, matchedOverlappedTraceBranch, matchedOverlappedTraceAnalysis, tracedataNeuronTag1, tracedataNeuronBranch1, tracedataNeuronCoordinateModified1, tracedataNeuronTypeModified1, tracedataNeuronRadiusModified1, tracedataNeuronSynapseModified1, tracedataNeuronConnectionModified1, tracedataNeuronTag2, tracedataNeuronBranch2, tracedataNeuronCoordinate2, tracedataNeuronType2, tracedataNeuronRadius2, tracedataNeuronSynapse2, tracedataNeuronConnection2);

                tracedataMontageFileTypeFlag = tracedataFileTypeFlag1;
                tracedataMontageStatus = tracedataStatus1;
                tracedataMontageHeader = tracedataHeader1;
                imageMontageResolution = imageResolution1;

                tracedataMontageNeuronTag = allMergedTraceMontageInstance.getTracedataMontageNeuronTag();
                tracedataMontageNeuronBranch = allMergedTraceMontageInstance.getTracedataMontageNeuronBranch();
                tracedataMontageNeuronCoordinate = allMergedTraceMontageInstance.getTracedataMontageNeuronCoordinate();
                tracedataMontageNeuronType = allMergedTraceMontageInstance.getTracedataMontageNeuronType();
                tracedataMontageNeuronRadius = allMergedTraceMontageInstance.getTracedataMontageNeuronRadius();
                tracedataMontageNeuronSynapse = allMergedTraceMontageInstance.getTracedataMontageNeuronSynapse();
                tracedataMontageNeuronConnection = allMergedTraceMontageInstance.getTracedataMontageNeuronConnection();

                java.io.File filedataMontage = montageJFileChooser.getSelectedFile();

                try {
                    WriteTraceDataFile tracedataMontageInstance = new WriteTraceDataFile(filedataMontage, tracedataMontageFileTypeFlag, tracedataMontageStatus, tracedataMontageHeader, imageMontageResolution, tracedataMontageNeuronTag, tracedataMontageNeuronBranch, tracedataMontageNeuronCoordinate, tracedataMontageNeuronType, tracedataMontageNeuronRadius, tracedataMontageNeuronSynapse, tracedataMontageNeuronConnection);
                } catch (IOException ex) {
                    IJ.error("Output file error", "Please choose a correct output file!");
                    System.out.println(ex.getMessage());
                    return;
                }

                matchedOverlappedTraceAnalysis.clear();
                matchedOverlappedTraceAnalysis.addAll(allMergedTraceMontageInstance.getMatchedOverlappedTraceAnalysisModified());

                if (matchedOverlappedTraceAnalysis.size() > 0) {
                    NeuronMontageSummary neuronMontageSummaryInstance = new NeuronMontageSummary(filedataMontage, matchedOverlappedTraceAnalysis, tracedataNeuronBranch1, tracedataNeuronBranch2);
                }
            }
        }
        
        //System.out.println("End of Action!");
    }//GEN-LAST:event_montageJButtonActionPerformed

    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelJButtonActionPerformed

    private void regionsizeJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regionsizeJTextFieldFocusLost
        String regionsizeString = regionsizeJTextField.getText();

        try {
            Integer returnValue = Integer.parseInt(regionsizeString);
            
            if (returnValue <= 0) {
                regionsizeJTextField.setText("100");
                IJ.error("Input value error", "Please enter a valid overlapped region size value!");
            }
        } catch (NumberFormatException e) {
            regionsizeJTextField.setText("100");
            IJ.error("Input value error", "Please enter a valid overlapped region size value!");
        }
    }//GEN-LAST:event_regionsizeJTextFieldFocusLost

    private void colorToleranceJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_colorToleranceJTextFieldFocusLost
        String colorToleranceString = colorToleranceJTextField.getText();

        try {
            Double returnValue = Double.parseDouble(colorToleranceString);

            if (returnValue <= 0 || returnValue > 1) {
                colorToleranceJTextField.setText("0.3");
                IJ.error("Input value error", "Please enter a valid color tolerance threshold!");
            }
        } catch (NumberFormatException e) {
            colorToleranceJTextField.setText("0.3");
            IJ.error("Input value error", "Please enter a valid color tolerance threshold!");
        }
    }//GEN-LAST:event_colorToleranceJTextFieldFocusLost

    private void positionTolerancePixelJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionTolerancePixelJTextFieldFocusLost
         String positionTolerancePixelString = positionTolerancePixelJTextField.getText();

         try {
             Integer returnValue = Integer.parseInt(positionTolerancePixelString);

             if (returnValue <= 0) {
                 positionTolerancePixelJTextField.setText("5");
                 IJ.error("Input value error", "Please enter a valid position tolerance threshold!");
             }
         } catch (NumberFormatException e) {
            positionTolerancePixelJTextField.setText("5");
            IJ.error("Input value error", "Please enter a valid position tolerance threshold!");
         }
    }//GEN-LAST:event_positionTolerancePixelJTextFieldFocusLost

    private void positionTolerancePointJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionTolerancePointJTextFieldFocusLost
        String positionTolerancePointString = positionTolerancePointJTextField.getText();

        try {
            Integer returnValue = Integer.parseInt(positionTolerancePointString);

            if (returnValue <= 0) {
                positionTolerancePointJTextField.setText("50");
                IJ.error("Input value error", "Please enter a valid position tolerance threshold!");
            }
        } catch (NumberFormatException e) {
            positionTolerancePointJTextField.setText("50");
            IJ.error("Input value error", "Please enter a valid position tolerance threshold!");
        }
    }//GEN-LAST:event_positionTolerancePointJTextFieldFocusLost

    private void positionToleranceRatioJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionToleranceRatioJTextFieldFocusLost
        String positionToleranceRatioString = positionToleranceRatioJTextField.getText();

        try {
            Double returnValue = Double.parseDouble(positionToleranceRatioString);

            if (returnValue <= 0 || returnValue > 1) {
                positionToleranceRatioJTextField.setText("0.8");
                IJ.error("Input value error", "Please enter a valid position tolerance threshold!");
            }
        } catch (NumberFormatException e) {
            positionToleranceRatioJTextField.setText("0.8");
            IJ.error("Input value error", "Please enter a valid position tolerance threshold!");
        }
    }//GEN-LAST:event_positionToleranceRatioJTextFieldFocusLost

    private void montageMethod1JRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montageMethod1JRadioButtonActionPerformed
        montageMethodFlag = 1;

        image2JPanel.setEnabled(true);
        filedata2JLabel.setEnabled(true);
        fileimage2JLabel.setEnabled(true);
        filedata2JButton.setEnabled(true);
        fileimage2JButton.setEnabled(true);
        filedata2JTextField.setEnabled(true);
        fileimage2JTextField.setEnabled(true);

        spatialJPanel.setEnabled(true);
        regionsizeJLabel.setEnabled(true);
        regionsizeJTextField.setEnabled(true);
        relativePositionJLabel.setEnabled(true);
        relativePositionJComboBox.setEnabled(true);
    }//GEN-LAST:event_montageMethod1JRadioButtonActionPerformed

    private void montageMethod2JRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montageMethod2JRadioButtonActionPerformed
        montageMethodFlag = 2;

        image2JPanel.setEnabled(true);
        filedata2JLabel.setEnabled(true);
        fileimage2JLabel.setEnabled(true);
        filedata2JButton.setEnabled(true);
        fileimage2JButton.setEnabled(true);
        filedata2JTextField.setEnabled(true);
        fileimage2JTextField.setEnabled(true);

        spatialJPanel.setEnabled(false);
        regionsizeJLabel.setEnabled(false);
        regionsizeJTextField.setEnabled(false);
        relativePositionJLabel.setEnabled(false);
        relativePositionJComboBox.setEnabled(false);
    }//GEN-LAST:event_montageMethod2JRadioButtonActionPerformed

    private void montageMethod3JRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montageMethod3JRadioButtonActionPerformed
        // TODO add your handling code here:
        montageMethodFlag = 3;

        image2JPanel.setEnabled(false);
        filedata2JLabel.setEnabled(false);
        fileimage2JLabel.setEnabled(false);
        filedata2JButton.setEnabled(false);
        fileimage2JButton.setEnabled(false);
        filedata2JTextField.setEnabled(false);
        fileimage2JTextField.setEnabled(false);

        spatialJPanel.setEnabled(false);
        regionsizeJLabel.setEnabled(false);
        regionsizeJTextField.setEnabled(false);
        relativePositionJLabel.setEnabled(false);
        relativePositionJComboBox.setEnabled(false);
    }//GEN-LAST:event_montageMethod3JRadioButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }
                } catch (Exception e) {

                    try {
                        UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(_TraceMontage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(_TraceMontage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(_TraceMontage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedLookAndFeelException ex) {
                        Logger.getLogger(_TraceMontage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                new _TraceMontage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelJButton;
    private javax.swing.JLabel colorToleranceJLabel;
    private javax.swing.JTextField colorToleranceJTextField;
    private javax.swing.JPanel criteriaJPanel;
    private javax.swing.JPanel criteriaJPanel1;
    private javax.swing.JButton filedata1JButton;
    private javax.swing.JFileChooser filedata1JFileChooser;
    private javax.swing.JLabel filedata1JLabel;
    private javax.swing.JTextField filedata1JTextField;
    private javax.swing.JButton filedata2JButton;
    private javax.swing.JFileChooser filedata2JFileChooser;
    private javax.swing.JLabel filedata2JLabel;
    private javax.swing.JTextField filedata2JTextField;
    private javax.swing.JButton fileimage1JButton;
    private javax.swing.JFileChooser fileimage1JFileChooser;
    private javax.swing.JLabel fileimage1JLabel;
    private javax.swing.JTextField fileimage1JTextField;
    private javax.swing.JButton fileimage2JButton;
    private javax.swing.JFileChooser fileimage2JFileChooser;
    private javax.swing.JLabel fileimage2JLabel;
    private javax.swing.JTextField fileimage2JTextField;
    private javax.swing.JPanel image1JPanel;
    private javax.swing.JPanel image2JPanel;
    private javax.swing.JButton montageJButton;
    private javax.swing.JFileChooser montageJFileChooser;
    private javax.swing.JRadioButton montageMethod1JRadioButton;
    private javax.swing.JRadioButton montageMethod2JRadioButton;
    private javax.swing.JRadioButton montageMethod3JRadioButton;
    private javax.swing.ButtonGroup montageMethodButtonGroup;
    private javax.swing.JLabel positionTolerancePixelJLabel;
    private javax.swing.JTextField positionTolerancePixelJTextField;
    private javax.swing.JLabel positionTolerancePointJLabel;
    private javax.swing.JTextField positionTolerancePointJTextField;
    private javax.swing.JLabel positionToleranceRatioJLabel;
    private javax.swing.JTextField positionToleranceRatioJTextField;
    private javax.swing.JLabel regionsizeJLabel;
    private javax.swing.JTextField regionsizeJTextField;
    private javax.swing.JComboBox relativePositionJComboBox;
    private javax.swing.JLabel relativePositionJLabel;
    private javax.swing.JPanel spatialJPanel;
    // End of variables declaration//GEN-END:variables
}
